pipeline {
    agent any
    options {
        timeout(time: 1, unit: 'HOURS')
        disableConcurrentBuilds()
    }
    environment {
        ECR_REPO = "${env.ECR_URL}"
        AWS_REGION = 'us-west-2'
        DOCKER_BUILDKIT = '0'
    }
    stages {
        stage('Verify BuildKit') {
            steps {
                sh '''
            echo "Docker BuildKit status:"
            docker info | grep -i buildkit
            echo "DOCKER_BUILDKIT value: $DOCKER_BUILDKIT"
        '''
            }
        }

        stage('Debug Environment') {
            steps {
                sh '''
                    echo "=== Environment Variables ==="
                    echo "ECR_REPO: $ECR_REPO"
                    echo "ECR_URL: $ECR_URL"
                    echo "AWS_REGION: $AWS_REGION"
                    echo "BUILD_NUMBER: $BUILD_NUMBER"
                    echo "=== Docker Info ==="
                    docker info
                    echo "=== AWS ECR Login Test ==="
                    aws ecr get-login-password --region ${AWS_REGION} || echo "ECR login failed"
                    echo "=== Directory Structure ==="
                    ls -la
                '''
            }
        }
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Build') {
            steps {
                dir('app') {
                    script {
                        try {
                            sh '''
                                echo "=== Building Docker Image ==="
                                echo "Building image: ${ECR_REPO}:${BUILD_NUMBER}"
                                docker build \
                                --memory=4g \
                                --memory-swap=8g \
                                -t ${ECR_REPO}:${BUILD_NUMBER} \
                                --pull .
                                echo "=== Image Built Successfully ==="
                                docker images | grep ${ECR_REPO}
                            '''
                        } catch (Exception e) {
                            sh 'docker system prune -f'
                            throw e
                        }
                    }
                }
            }
        }
        stage('Push') {
            steps {
                script {
                    sh """
                        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${env.ECR_URL}
                        docker push ${env.ECR_URL}:${env.BUILD_NUMBER}
                    """
                }
            }
        }
        stage('Update Deployment') {
            steps {
                script {
                    sh """
                        aws ssm put-parameter \
                        --region ${AWS_REGION} \
                        --name "/ml-inference/latest-image" \
                        --value "${env.ECR_URL}:${env.BUILD_NUMBER}" \
                        --type String \
                        --overwrite
                    """
                }
            }
        }
    }
    post {
        always {
            sh """
                docker rmi ${env.ECR_URL}:${env.BUILD_NUMBER} || true
                docker system prune -f
                docker image prune -f
            """
        }
        failure {
            echo 'Build failed!'
        }
    }
}
